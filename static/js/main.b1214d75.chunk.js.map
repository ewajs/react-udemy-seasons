{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","className","Spinner","message","defaultProps","App","state","errorMessage","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","console","log","this","renderContent","React","Component","ReactDOM","render","document","querySelector"],"mappings":"0OAGMA,G,MAAe,CACnBC,OAAQ,CACNC,KAAM,sBACNC,SAAU,OAEZC,OAAQ,CACNF,KAAM,oBACNC,SAAU,eA0BCE,EAZO,SAACC,GACrB,IAXiBC,EAAKC,EAWhBC,GAXWF,EAWQD,EAAMC,KAXTC,GAWc,IAAIE,MAAOC,YARnC,GAAKH,EAAQ,EAChBD,EAAM,EAAI,SAAW,SAErBA,EAAM,EAAI,SAAW,UAIC,EAEJP,EAAaS,GAAhCP,EAFuB,EAEvBA,KAAMC,EAFiB,EAEjBA,SACd,OACE,yBAAKS,UAAS,yBAAoBH,IAChC,uBAAGG,UAAS,4BAAuBT,EAAvB,WACZ,4BAAKD,GACL,uBAAGU,UAAS,6BAAwBT,EAAxB,aC7BZU,EAAU,SAACP,GACf,OACE,yBAAKM,UAAU,oBACb,yBAAKA,UAAU,sBAAsBN,EAAMQ,WAKjDD,EAAQE,aAAe,CACrBD,QAAS,cAGID,QCETG,G,kNASJC,MAAQ,CAAEV,IAAK,KAAMW,aAAc,I,kEAEd,IAAD,OAClBC,OAAOC,UAAUC,YAAYC,oBAC3B,SAACC,GAEC,EAAKC,SAAS,CAAEjB,IAAKgB,EAASE,OAAOC,cAIvC,SAACC,GACC,EAAKH,SAAS,CAAEN,aAAcS,EAAIb,e,2CAMtCc,QAAQC,IAAI,a,sCAKZ,OAAIC,KAAKb,MAAMC,eAAiBY,KAAKb,MAAMV,IAClC,uCAAauB,KAAKb,MAAMC,eAG5BY,KAAKb,MAAMC,cAAgBY,KAAKb,MAAMV,IAClC,kBAAC,EAAD,CAAeA,IAAKuB,KAAKb,MAAMV,MAGnCuB,KAAKb,MAAMC,cAAiBY,KAAKb,MAAMV,SAA5C,EACS,kBAAC,EAAD,CAASO,QAAQ,qC,+BAK1B,OACE,6BACE,yBAAKF,UAAU,sCACb,4DAEDkB,KAAKC,qB,GAlDIC,IAAMC,YAwDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,W","file":"static/js/main.b1214d75.chunk.js","sourcesContent":["import \"./SeasonDisplay.css\";\nimport React from \"react\";\n\nconst seasonConfig = {\n  summer: {\n    text: \"Let's hit the beach\",\n    iconName: \"sun\",\n  },\n  winter: {\n    text: \"Burr, it's chilly\",\n    iconName: \"snowflake\",\n  },\n};\n\nconst getSeason = (lat, month) => {\n  // For testing (location override is not working with Semantic UI CDN)\n  //return \"summer\";\n  if (month > 2 && month < 9) {\n    return lat > 0 ? \"summer\" : \"winter\";\n  } else {\n    return lat > 0 ? \"winter\" : \"summer\";\n  }\n};\n\nconst SeasonDisplay = (props) => {\n  const season = getSeason(props.lat, new Date().getMonth());\n  const { text, iconName } = seasonConfig[season];\n  return (\n    <div className={`season-display ${season}`}>\n      <i className={`icon-left massive ${iconName} icon`}></i>\n      <h1>{text}</h1>\n      <i className={`icon-right massive ${iconName} icon`}></i>\n    </div>\n  );\n};\n\nexport default SeasonDisplay;\n","import React from \"react\";\n\nconst Spinner = (props) => {\n  return (\n    <div className=\"ui active dimmer\">\n      <div className=\"ui big text loader\">{props.message}</div>\n    </div>\n  );\n};\n\nSpinner.defaultProps = {\n  message: \"Loading...\",\n};\n\nexport default Spinner;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport SeasonDisplay from \"./SeasonDisplay\";\nimport Spinner from \"./Spinner\";\nimport \"./index.css\";\n\n// Function Based Component\n// const App = () => {\n//   window.navigator.geolocation.getCurrentPosition(\n//     (position) => console.log(position),\n//     (err) => console.log(err)\n//   );\n//   return <div>Hi there</div>;\n// };\n\n// Class Based Component\nclass App extends React.Component {\n  //   constructor(props) {\n  //     super(props);\n  //     // Only for initialization you can assign values directly\n  //     // to the state property of the instantiated object.\n  //     this.state = { lat: null, errorMessage: \"\" };\n  //   }\n\n  // Alternate state initialization w/o constructor\n  state = { lat: null, errorMessage: \"\" };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      (position) => {\n        // Always use this.setState({ ... }) to update state\n        this.setState({ lat: position.coords.latitude });\n        // Never assign directly to the state property\n        // this.state.lat = position.coords.latitde;\n      },\n      (err) => {\n        this.setState({ errorMessage: err.message });\n      }\n    );\n  }\n\n  componentDidUpdate() {\n    console.log(\"Updated\");\n  }\n\n  // Helper method to avoid conditionals in render method\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n\n    if (!this.state.errorMessage && !this.state.lat) {\n      return <Spinner message=\"Please accept location request\" />;\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"ui attached message message-center\">\n          <p>This will always be rendered</p>\n        </div>\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}